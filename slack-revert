#!/bin/bash

# slack-revert 04/2024 Anagnostakis Ioannis GR 
# No copyright

# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


RED='\033[0;31m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
RESET='\033[0m'

# Root access check
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}ROOT ACCESS PLEASE OR GO HOME...${RESET}"
    exit 1
fi

DIR=/home/slack-revert
SNAP=installed_packages
DATE=$(date +%d_%m_%Y-%H:%M)


if [ -d "$DIR"/2/ ]; then
    while true; do
        read -p "Create a NEW backup snapshot OR use your existing snapshot and REVERT system? (new/revert): " answer

        case $answer in
          new)
                echo "Creating a new snapshot"
                # Create directories if they don't exist
                mkdir -p "$DIR"/1 || exit 1
                mkdir -p "$DIR"/2 || exit 1
                # Create snapshot
                touch "$DIR"/1/"$SNAP" || exit 2
                touch "$DIR"/2/"$SNAP" || exit 2
                echo "$DATE" > "$DIR"/1/"$SNAP"
                echo "$DATE" > "$DIR"/2/"$SNAP"
                ls /var/adm/packages/ >> "$DIR"/1/"$SNAP"
                ls /var/adm/packages/ >> "$DIR"/2/"$SNAP"

                # Make sure that only officially slackware packages included.
                input_file="$DIR"/1/"$SNAP"
                output_1="$DIR"/1/"1snap.txt"

                # First, keep lines that don't end with an underscore followed by only letters (case-insensitive)
                awk '!/_[A-Za-z]+$/' "$input_file" > "$output_1"

                # Then, add back any lines that end with an underscore followed by digits
                awk '/_[A-Za-z]+$/' "$input_file" | awk '/_[0-9]+$/' >> "$output_1"

                cat "$output_1" > "$DIR"/2/snapshot-$DATE.txt
                echo -e "${GREEN}System snapshot created${RESET}"

                # Ask if the user wants to compare today's snapshot with an older one
                read -p "Do you want to compare today's snapshot with an older one? (yes/no): " compare_response
                compare_response=$(echo "$compare_response" | tr '[:upper:]' '[:lower:]')

                if [[ "$compare_response" == "yes" ]]; then
                    # List all .txt files in DIR and store them in an array
                    txt_files=($(ls "$DIR"/2 | grep .txt))

                    # Check if there are any .txt files
                    if [ ${#txt_files[@]} -eq 0 ]; then
                        echo -e "${BLUE}No .txt files found in $DIR/2.${RESET}"
                        exit 1
                    fi

                    # Display the list of .txt files with numbering
                    echo -e "${GREEN}Please select a file by entering the corresponding number:${RESET}"
                    for i in "${!txt_files[@]}"; do
                        echo "$((i + 1)). ${txt_files[$i]}"
                    done

                    # Get user input to select a file for comparison
                    read -p "Enter the number of the file you want to compare with today's snapshot: " compare_index
                    compare_index=$((compare_index - 1))

                    # Validate the index
                    if [[ $compare_index -lt 0 || $compare_index -ge ${#txt_files[@]} ]]; then
                        echo -e "${BLUE}Invalid selection.${RESET}"
                        exit 1
                    fi

                    # Get the file name to compare with today's snapshot
                    compare_file="${txt_files[$compare_index]}"

                    # Perform diff and display the output
                    echo -e "${GREEN}Comparing today's snapshot with $compare_file${RESET}"
                    diff -y "$DIR"/2/snapshot-"$DATE".txt "$DIR"/2/"$compare_file"
                else
                    echo -e "${BLUE}No comparison requested.${RESET}"
                fi
                break
                ;;
       revert)
            if [ -z "$ARCH" ]; then
              case "$( uname -m )" in
                i?86) ARCH=i586 ;;
                arm*) ARCH=arm ;;
                *) ARCH=$( uname -m ) ;;
             esac
           fi

         # no comments please...
         cat /etc/*version* > version1
         wait # I need comments because I dont know I m doing ...
         # take + if exist
         awk '{print substr($0, length($0), 1)}' version1 > version3
         wait 
         # If exist convert it to current
         sed -i 's/\+/current/g' version3
         wait
         # track slackware version number
         awk '{ gsub(/[^0-9.]/, "", $0); if ($0 != "") print }' version1 > version2
         wait
         # Get the output of cat version3
         madness=$(cat version3)
         # One day I will be a h4k3R
          if [ "$madness" = "current" ]; then
           vers="current"
          else
           vers=$(cat version2)
         fi
        # \o/
        echo "$vers"

      if [ "$ARCH" = "i586" ]; then
        URL=https://slackware.uk/cumulative/slackware-$vers/
       elif [ "$ARCH" = "i686" ]; then
        URL=https://slackware.uk/cumulative/slackware-$vers/
       elif [ "$ARCH" = "x86_64" ]; then
        URL=https://slackware.uk/cumulative/slackware64-$vers/
       else
        echo -e "Not supported $ARCH"
     exit 
     fi

      # List all .txt files in DIR and store them in an array
      # every txt file is a "snapshot"
     txt_files=($(ls "$DIR"/2 | grep .txt))

     # Check if there are any .txt files
    if [ ${#txt_files[@]} -eq 0 ]; then
       echo -e "${BLUE}No .txt files found in $DIR.${RESET}"
    exit 1
    fi

    # Display the list of .txt files with numbering
    echo -e "${GREEN}Please select a file by entering the corresponding number:${RESET}"
    for i in "${!txt_files[@]}"; do
    echo "$((i + 1)). ${txt_files[$i]}"
    done

       read -p "Enter the number of the file you want to choose: " choice

    # Validate user input
    if ! [[ "$choice" =~ ^[0-9]+$ ]]; then
    echo -e "${RED}Invalid input. Please enter a valid number.${RESET}"
    exit 99
    fi

     # Convert choice to zero-based index
    index=$((choice - 1))

     # Check if the chosen index is within the valid range
    if [ "$index" -lt 0 ] || [ "$index" -ge "${#txt_files[@]}" ]; then
    echo -e "${RED}Invalid choice. Please select a valid number from the list.${RESET}"
    exit 99
    fi

    # Store the selected file in $snap1
    snap1="${txt_files[$index]}"

    echo -e "${BLUE}You selected: $snap1 ${RESET}"
    while true; do
    read -p "Do you want to continue? (y/n): " continue_answer

    case $continue_answer in
        y|Y)
            echo "Continuing..."
             source /usr/local/bin/slack-revert-revert.sh
            break  
            ;;
        n|N)
            echo "Exiting..."
            exit 0  
            ;;
        *)
            echo -e "${RED}Invalid response. Please enter${RESET} 'y' or 'n'."
            ;;
    esac
done
            break
            ;;
        *)
            echo -e "${RED}Invalid answer. Please enter 'new' or 'revert'.${RESET}"
             exit 99
            ;;
    esac
done

# IF RUN FIRST TIME then,
else
echo -e "${GREEN}==========================================${RESET}"
echo ""
echo -e "${BLUE}          Welcome to slack-revert           ${RESET}"
echo ""
echo "  It appears that slack-revert is running   "
echo "              for the first time.         "
echo ""
echo "        Creating system snapshot...       "
echo ""
echo -e "${GREEN}==========================================${RESET}"
# create 2 dirs one to play and one for backup
mkdir -p "$DIR"/1 || exit 1
mkdir -p "$DIR"/2 || exit 1
# again the same, 2 files.txt with all installed packages for specific day
touch "$DIR"/1/"$SNAP" || exit 2
touch "$DIR"/2/"$SNAP" || exit 2

ls /var/adm/packages/ >> "$DIR"/1/"$SNAP"
ls /var/adm/packages/ >> "$DIR"/2/"$SNAP"
########################################################################################################
# Make sure that only officially slackware packages included.
input_file="$DIR"/1/"$SNAP"
output_1="$DIR"/1/"1snap.txt"

# First, keep lines that don't end with an underscore followed by only letters (case-insensitive)
awk '!/_[A-Za-z]+$/' "$input_file" > "$output_1"

# Then, add back any lines that end with an underscore followed by digits
awk '/_[A-Za-z]+$/' "$input_file" | awk '/_[0-9]+$/' >> "$output_1"
#########################################################################################################
cat "$output_1" > "$DIR"/2/snapshot-$DATE.txt
echo -e "${GREEN}=====================================${RESET}"
echo -e "${GREEN}      System Snapshot Created!       ${RESET}"
echo -e "${GREEN}=====================================${RESET}"
echo ""
ls "$DIR" | grep "$output_1"
exit
fi

